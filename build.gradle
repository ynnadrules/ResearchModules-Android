// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.sage_research_version = '0.2.0'
    ext.kotlin_version = '1.3.50'
    ext.support_library_version = '28.0.0'
    ext.butterknife_version = '9.0.0'
    ext.dagger_version = '2.21'
    ext.guava_version = '28.0-android'
    ext.auto_value_version = '1.6.3'
    ext.auto_value_gson_version = '0.8.0'

    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://dl.bintray.com/readdle/maven" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.18"


        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'

        // SageResearch
        classpath "com.jakewharton:butterknife-gradle-plugin:$butterknife_version"

        //quality
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
        classpath 'com.chaitanyapramod.gradle:findbugs-android:1.1'

        //SwiftAndroid
        classpath 'com.readdle.android.swift:gradle:1.3.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    version = '0.3.0'
    group = 'org.sagebionetworks.research.modules'

    repositories {
        google()
        jcenter()
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.plugins.hasPlugin('com.android.library')) {
            apply plugin: 'org.jetbrains.dokka-android'

            task sourcesJar(type: Jar) {
                from android.sourceSets.main.java.srcDirs
                classifier = 'sources'
            }

            dokka {
                outputFormat = 'html'
                outputDirectory = "$buildDir/javadoc"
            }

            task javadocJar(type: Jar, dependsOn: dokka) {
                classifier = 'javadoc'
                from dokka.outputDirectory
            }

            artifacts {
                // TODO: package javadoc for maven artifact publishing
                archives javadocJar
                archives sourcesJar
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
